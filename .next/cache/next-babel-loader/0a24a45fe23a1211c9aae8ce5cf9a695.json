{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\Prisma\\\\SQLLITE\\\\JAVASCRIPT\\\\demo_app\\\\pages\\\\p\\\\[id].jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ReactMarkdown from 'react-markdown';\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\n\nasync function publish(id) {\n  const res = await fetch(`http://localhost:3000/api/publish${id}`, {\n    method: 'PUT'\n  });\n  const data = await res.json();\n}\n\nasync function destroy(id) {\n  const res = await fetch(`http://localhost:3000/api/post/${id}`, {\n    method: 'DELETE'\n  });\n  const data = await res.json();\n  Router.push('/drafts');\n}\n\nconst Post = props => {\n  let title = props.title;\n\n  if (!props.published) {\n    title = `${title} (Drafts)`;\n  }\n\n  const authorName = props.author ? props.author.name : 'Unknown author';\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, title), __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"by \", authorName), __jsx(ReactMarkdown, {\n    source: props.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, !props.published && __jsx(\"button\", {\n    onClick: () => publish(props.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  }, \"Publish\"), __jsx(\"button\", {\n    onClick: () => destroy(props.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"Delete\")));\n};\n\nexport const getServerSideProps = async context => {\n  const res = await fetch(`http://localhost:3000/api/post/${context.params.id}`);\n  const data = await res.json();\n  return {\n    props: _objectSpread({}, data)\n  };\n};\nexport default Post;","map":{"version":3,"sources":["E:/Projects/Prisma/SQLLITE/JAVASCRIPT/demo_app/pages/p/[id].jsx"],"names":["ReactMarkdown","fetch","Router","publish","id","res","method","data","json","destroy","push","Post","props","title","published","authorName","author","name","content","getServerSideProps","context","params"],"mappings":";;;;;;;;;;AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,eAAeC,OAAf,CAAuBC,EAAvB,EAA2B;AACvB,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAAE,oCAAmCG,EAAG,EAAxC,EAA2C;AAC9DE,IAAAA,MAAM,EAAE;AADsD,GAA3C,CAAvB;AAGA,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEH;;AAED,eAAeC,OAAf,CAAuBL,EAAvB,EAA2B;AACvB,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAAE,kCAAiCG,EAAG,EAAtC,EAAyC;AAC5DE,IAAAA,MAAM,EAAE;AADoD,GAAzC,CAAvB;AAGA,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAN,EAAAA,MAAM,CAACQ,IAAP,CAAY,SAAZ;AACH;;AAED,MAAMC,IAAI,GAAGC,KAAK,IAAI;AAClB,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;;AACA,MAAG,CAACD,KAAK,CAACE,SAAV,EAAqB;AACjBD,IAAAA,KAAK,GAAI,GAAEA,KAAM,WAAjB;AACH;;AACD,QAAME,UAAU,GAAGH,KAAK,CAACI,MAAN,GAAeJ,KAAK,CAACI,MAAN,CAAaC,IAA5B,GAAmC,gBAAtD;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,KAAL,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAWE,UAAX,CAFJ,EAGI,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEH,KAAK,CAACM,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ,CAACN,KAAK,CAACE,SAAP,IACI;AAAQ,IAAA,OAAO,EAAE,MAAMX,OAAO,CAACS,KAAK,CAACR,EAAP,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHZ,EAKQ;AAAQ,IAAA,OAAO,EAAE,MAAMK,OAAO,CAACG,KAAK,CAACR,EAAP,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALR,CAJJ,CADJ;AAcH,CArBD;;AAuBA,OAAO,MAAMe,kBAAkB,GAAG,MAAOC,OAAP,IAAmB;AACjD,QAAMf,GAAG,GAAG,MAAMJ,KAAK,CAAE,kCAAiCmB,OAAO,CAACC,MAAR,CAAejB,EAAG,EAArD,CAAvB;AACA,QAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEA,SAAO;AAACI,IAAAA,KAAK,oBAAML,IAAN;AAAN,GAAP;AACH,CALM;AAOP,eAAeI,IAAf","sourcesContent":["import ReactMarkdown from 'react-markdown'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport Router from 'next/router'\r\n\r\nasync function publish(id) {\r\n    const res = await fetch(`http://localhost:3000/api/publish${id}`, {\r\n        method: 'PUT'\r\n    })\r\n    const data = await res.json()\r\n    \r\n}\r\n\r\nasync function destroy(id) {\r\n    const res = await fetch(`http://localhost:3000/api/post/${id}`, {\r\n        method: 'DELETE'\r\n    })\r\n    const data = await res.json()\r\n    Router.push('/drafts')\r\n}\r\n\r\nconst Post = props => {\r\n    let title = props.title\r\n    if(!props.published) {\r\n        title = `${title} (Drafts)`\r\n    }\r\n    const authorName = props.author ? props.author.name : 'Unknown author'\r\n\r\n    return(\r\n        <div>\r\n            <h2>{title}</h2>\r\n            <small>by {authorName}</small>\r\n            <ReactMarkdown source={props.content} />\r\n            <div>\r\n                {\r\n                    !props.published && (\r\n                        <button onClick={() => publish(props.id)}>Publish</button>\r\n                    )}\r\n                    <button onClick={() => destroy(props.id)}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps = async (context) => {\r\n    const res = await fetch(`http://localhost:3000/api/post/${context.params.id}`)\r\n    const data = await res.json()\r\n\r\n    return {props: {...data}}\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}