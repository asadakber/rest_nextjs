{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\Projects\\\\Prisma\\\\SQLLITE\\\\JAVASCRIPT\\\\demo_app\\\\pages\\\\p\\\\[id].jsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport ReactMarkdown from 'react-markdown';\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\n\nfunction publish(id) {\n  var res, data;\n  return _regeneratorRuntime.async(function publish$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/api/publish\".concat(id), {\n            method: 'PUT'\n          }));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction destroy(id) {\n  var res, data;\n  return _regeneratorRuntime.async(function destroy$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/api/post/\".concat(id), {\n            method: 'DELETE'\n          }));\n\n        case 2:\n          res = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context2.sent;\n          Router.push('/drafts');\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar Post = function Post(props) {\n  var title = props.title;\n\n  if (!props.published) {\n    title = \"\".concat(title, \" (Drafts)\");\n  }\n\n  var authorName = props.author ? props.author.name : 'Unknown author';\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, title), __jsx(\"small\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"by \", authorName), __jsx(ReactMarkdown, {\n    source: props.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, !props.published && __jsx(\"button\", {\n    onClick: function onClick() {\n      return publish(props.id);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  }, \"Publish\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return destroy(props.id);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"Delete\")));\n};\n\nexport var __N_SSP = true;\nexport default Post;","map":{"version":3,"sources":["E:/Projects/Prisma/SQLLITE/JAVASCRIPT/demo_app/pages/p/[id].jsx"],"names":["ReactMarkdown","fetch","Router","publish","id","method","res","json","data","destroy","push","Post","props","title","published","authorName","author","name","content"],"mappings":";;;;;;;AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,SAAeC,OAAf,CAAuBC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACsBH,KAAK,4CAAqCG,EAArC,GAA2C;AAC9DC,YAAAA,MAAM,EAAE;AADsD,WAA3C,CAD3B;;AAAA;AACUC,UAAAA,GADV;AAAA;AAAA,2CAIuBA,GAAG,CAACC,IAAJ,EAJvB;;AAAA;AAIUC,UAAAA,IAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAeC,OAAf,CAAuBL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACsBH,KAAK,0CAAmCG,EAAnC,GAAyC;AAC5DC,YAAAA,MAAM,EAAE;AADoD,WAAzC,CAD3B;;AAAA;AACUC,UAAAA,GADV;AAAA;AAAA,2CAIuBA,GAAG,CAACC,IAAJ,EAJvB;;AAAA;AAIUC,UAAAA,IAJV;AAKIN,UAAAA,MAAM,CAACQ,IAAP,CAAY,SAAZ;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AAClB,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;;AACA,MAAG,CAACD,KAAK,CAACE,SAAV,EAAqB;AACjBD,IAAAA,KAAK,aAAMA,KAAN,cAAL;AACH;;AACD,MAAME,UAAU,GAAGH,KAAK,CAACI,MAAN,GAAeJ,KAAK,CAACI,MAAN,CAAaC,IAA5B,GAAmC,gBAAtD;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,KAAL,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAWE,UAAX,CAFJ,EAGI,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEH,KAAK,CAACM,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ,CAACN,KAAK,CAACE,SAAP,IACI;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMX,OAAO,CAACS,KAAK,CAACR,EAAP,CAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHZ,EAKQ;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMK,OAAO,CAACG,KAAK,CAACR,EAAP,CAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALR,CAJJ,CADJ;AAcH,CArBD;;;AA8BA,eAAeO,IAAf","sourcesContent":["import ReactMarkdown from 'react-markdown'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport Router from 'next/router'\r\n\r\nasync function publish(id) {\r\n    const res = await fetch(`http://localhost:3000/api/publish${id}`, {\r\n        method: 'PUT'\r\n    })\r\n    const data = await res.json()\r\n    \r\n}\r\n\r\nasync function destroy(id) {\r\n    const res = await fetch(`http://localhost:3000/api/post/${id}`, {\r\n        method: 'DELETE'\r\n    })\r\n    const data = await res.json()\r\n    Router.push('/drafts')\r\n}\r\n\r\nconst Post = props => {\r\n    let title = props.title\r\n    if(!props.published) {\r\n        title = `${title} (Drafts)`\r\n    }\r\n    const authorName = props.author ? props.author.name : 'Unknown author'\r\n\r\n    return(\r\n        <div>\r\n            <h2>{title}</h2>\r\n            <small>by {authorName}</small>\r\n            <ReactMarkdown source={props.content} />\r\n            <div>\r\n                {\r\n                    !props.published && (\r\n                        <button onClick={() => publish(props.id)}>Publish</button>\r\n                    )}\r\n                    <button onClick={() => destroy(props.id)}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps = async (context) => {\r\n    const res = await fetch(`http://localhost:3000/api/post/${context.params.id}`)\r\n    const data = await res.json()\r\n\r\n    return {props: {...data}}\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}